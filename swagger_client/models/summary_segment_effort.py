# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SummarySegmentEffort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'elapsed_time': 'int',
        'start_date': 'datetime',
        'start_date_local': 'datetime',
        'distance': 'float',
        'is_kom': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'elapsed_time': 'elapsed_time',
        'start_date': 'start_date',
        'start_date_local': 'start_date_local',
        'distance': 'distance',
        'is_kom': 'is_kom'
    }

    def __init__(self, id=None, elapsed_time=None, start_date=None, start_date_local=None, distance=None, is_kom=None):  # noqa: E501
        """SummarySegmentEffort - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._elapsed_time = None
        self._start_date = None
        self._start_date_local = None
        self._distance = None
        self._is_kom = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if start_date is not None:
            self.start_date = start_date
        if start_date_local is not None:
            self.start_date_local = start_date_local
        if distance is not None:
            self.distance = distance
        if is_kom is not None:
            self.is_kom = is_kom

    @property
    def id(self):
        """Gets the id of this SummarySegmentEffort.  # noqa: E501

        The unique identifier of this effort  # noqa: E501

        :return: The id of this SummarySegmentEffort.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SummarySegmentEffort.

        The unique identifier of this effort  # noqa: E501

        :param id: The id of this SummarySegmentEffort.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this SummarySegmentEffort.  # noqa: E501

        The effort's elapsed time  # noqa: E501

        :return: The elapsed_time of this SummarySegmentEffort.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this SummarySegmentEffort.

        The effort's elapsed time  # noqa: E501

        :param elapsed_time: The elapsed_time of this SummarySegmentEffort.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def start_date(self):
        """Gets the start_date of this SummarySegmentEffort.  # noqa: E501

        The time at which the effort was started.  # noqa: E501

        :return: The start_date of this SummarySegmentEffort.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SummarySegmentEffort.

        The time at which the effort was started.  # noqa: E501

        :param start_date: The start_date of this SummarySegmentEffort.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def start_date_local(self):
        """Gets the start_date_local of this SummarySegmentEffort.  # noqa: E501

        The time at which the effort was started in the local timezone.  # noqa: E501

        :return: The start_date_local of this SummarySegmentEffort.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_local

    @start_date_local.setter
    def start_date_local(self, start_date_local):
        """Sets the start_date_local of this SummarySegmentEffort.

        The time at which the effort was started in the local timezone.  # noqa: E501

        :param start_date_local: The start_date_local of this SummarySegmentEffort.  # noqa: E501
        :type: datetime
        """

        self._start_date_local = start_date_local

    @property
    def distance(self):
        """Gets the distance of this SummarySegmentEffort.  # noqa: E501

        The effort's distance in meters  # noqa: E501

        :return: The distance of this SummarySegmentEffort.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this SummarySegmentEffort.

        The effort's distance in meters  # noqa: E501

        :param distance: The distance of this SummarySegmentEffort.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def is_kom(self):
        """Gets the is_kom of this SummarySegmentEffort.  # noqa: E501

        Whether this effort is the current best on the leaderboard  # noqa: E501

        :return: The is_kom of this SummarySegmentEffort.  # noqa: E501
        :rtype: bool
        """
        return self._is_kom

    @is_kom.setter
    def is_kom(self, is_kom):
        """Sets the is_kom of this SummarySegmentEffort.

        Whether this effort is the current best on the leaderboard  # noqa: E501

        :param is_kom: The is_kom of this SummarySegmentEffort.  # noqa: E501
        :type: bool
        """

        self._is_kom = is_kom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummarySegmentEffort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummarySegmentEffort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
