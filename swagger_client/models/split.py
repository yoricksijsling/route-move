# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Split(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'average_speed': 'float',
        'distance': 'float',
        'elapsed_time': 'int',
        'elevation_difference': 'float',
        'pace_zone': 'int',
        'moving_time': 'int',
        'split': 'int'
    }

    attribute_map = {
        'average_speed': 'average_speed',
        'distance': 'distance',
        'elapsed_time': 'elapsed_time',
        'elevation_difference': 'elevation_difference',
        'pace_zone': 'pace_zone',
        'moving_time': 'moving_time',
        'split': 'split'
    }

    def __init__(self, average_speed=None, distance=None, elapsed_time=None, elevation_difference=None, pace_zone=None, moving_time=None, split=None):  # noqa: E501
        """Split - a model defined in Swagger"""  # noqa: E501

        self._average_speed = None
        self._distance = None
        self._elapsed_time = None
        self._elevation_difference = None
        self._pace_zone = None
        self._moving_time = None
        self._split = None
        self.discriminator = None

        if average_speed is not None:
            self.average_speed = average_speed
        if distance is not None:
            self.distance = distance
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if elevation_difference is not None:
            self.elevation_difference = elevation_difference
        if pace_zone is not None:
            self.pace_zone = pace_zone
        if moving_time is not None:
            self.moving_time = moving_time
        if split is not None:
            self.split = split

    @property
    def average_speed(self):
        """Gets the average_speed of this Split.  # noqa: E501

        The average speed of this split, in meters per second  # noqa: E501

        :return: The average_speed of this Split.  # noqa: E501
        :rtype: float
        """
        return self._average_speed

    @average_speed.setter
    def average_speed(self, average_speed):
        """Sets the average_speed of this Split.

        The average speed of this split, in meters per second  # noqa: E501

        :param average_speed: The average_speed of this Split.  # noqa: E501
        :type: float
        """

        self._average_speed = average_speed

    @property
    def distance(self):
        """Gets the distance of this Split.  # noqa: E501

        The distance of this split, in meters  # noqa: E501

        :return: The distance of this Split.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Split.

        The distance of this split, in meters  # noqa: E501

        :param distance: The distance of this Split.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this Split.  # noqa: E501

        The elapsed time of this split, in seconds  # noqa: E501

        :return: The elapsed_time of this Split.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this Split.

        The elapsed time of this split, in seconds  # noqa: E501

        :param elapsed_time: The elapsed_time of this Split.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def elevation_difference(self):
        """Gets the elevation_difference of this Split.  # noqa: E501

        The elevation difference of this split, in meters  # noqa: E501

        :return: The elevation_difference of this Split.  # noqa: E501
        :rtype: float
        """
        return self._elevation_difference

    @elevation_difference.setter
    def elevation_difference(self, elevation_difference):
        """Sets the elevation_difference of this Split.

        The elevation difference of this split, in meters  # noqa: E501

        :param elevation_difference: The elevation_difference of this Split.  # noqa: E501
        :type: float
        """

        self._elevation_difference = elevation_difference

    @property
    def pace_zone(self):
        """Gets the pace_zone of this Split.  # noqa: E501

        The pacing zone of this split  # noqa: E501

        :return: The pace_zone of this Split.  # noqa: E501
        :rtype: int
        """
        return self._pace_zone

    @pace_zone.setter
    def pace_zone(self, pace_zone):
        """Sets the pace_zone of this Split.

        The pacing zone of this split  # noqa: E501

        :param pace_zone: The pace_zone of this Split.  # noqa: E501
        :type: int
        """

        self._pace_zone = pace_zone

    @property
    def moving_time(self):
        """Gets the moving_time of this Split.  # noqa: E501

        The moving time of this split, in seconds  # noqa: E501

        :return: The moving_time of this Split.  # noqa: E501
        :rtype: int
        """
        return self._moving_time

    @moving_time.setter
    def moving_time(self, moving_time):
        """Sets the moving_time of this Split.

        The moving time of this split, in seconds  # noqa: E501

        :param moving_time: The moving_time of this Split.  # noqa: E501
        :type: int
        """

        self._moving_time = moving_time

    @property
    def split(self):
        """Gets the split of this Split.  # noqa: E501

        N/A  # noqa: E501

        :return: The split of this Split.  # noqa: E501
        :rtype: int
        """
        return self._split

    @split.setter
    def split(self, split):
        """Sets the split of this Split.

        N/A  # noqa: E501

        :param split: The split of this Split.  # noqa: E501
        :type: int
        """

        self._split = split

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Split, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Split):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
