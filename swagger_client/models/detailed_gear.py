# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.summary_gear import SummaryGear  # noqa: F401,E501


class DetailedGear(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resource_state': 'int',
        'primary': 'bool',
        'name': 'str',
        'distance': 'float',
        'brand_name': 'str',
        'model_name': 'str',
        'frame_type': 'int',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'resource_state': 'resource_state',
        'primary': 'primary',
        'name': 'name',
        'distance': 'distance',
        'brand_name': 'brand_name',
        'model_name': 'model_name',
        'frame_type': 'frame_type',
        'description': 'description'
    }

    def __init__(self, id=None, resource_state=None, primary=None, name=None, distance=None, brand_name=None, model_name=None, frame_type=None, description=None):  # noqa: E501
        """DetailedGear - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._resource_state = None
        self._primary = None
        self._name = None
        self._distance = None
        self._brand_name = None
        self._model_name = None
        self._frame_type = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if resource_state is not None:
            self.resource_state = resource_state
        if primary is not None:
            self.primary = primary
        if name is not None:
            self.name = name
        if distance is not None:
            self.distance = distance
        if brand_name is not None:
            self.brand_name = brand_name
        if model_name is not None:
            self.model_name = model_name
        if frame_type is not None:
            self.frame_type = frame_type
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this DetailedGear.  # noqa: E501

        The gear's unique identifier.  # noqa: E501

        :return: The id of this DetailedGear.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DetailedGear.

        The gear's unique identifier.  # noqa: E501

        :param id: The id of this DetailedGear.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_state(self):
        """Gets the resource_state of this DetailedGear.  # noqa: E501

        Resource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"  # noqa: E501

        :return: The resource_state of this DetailedGear.  # noqa: E501
        :rtype: int
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this DetailedGear.

        Resource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"  # noqa: E501

        :param resource_state: The resource_state of this DetailedGear.  # noqa: E501
        :type: int
        """

        self._resource_state = resource_state

    @property
    def primary(self):
        """Gets the primary of this DetailedGear.  # noqa: E501

        Whether this gear's is the owner's default one.  # noqa: E501

        :return: The primary of this DetailedGear.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this DetailedGear.

        Whether this gear's is the owner's default one.  # noqa: E501

        :param primary: The primary of this DetailedGear.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    @property
    def name(self):
        """Gets the name of this DetailedGear.  # noqa: E501

        The gear's name.  # noqa: E501

        :return: The name of this DetailedGear.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DetailedGear.

        The gear's name.  # noqa: E501

        :param name: The name of this DetailedGear.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def distance(self):
        """Gets the distance of this DetailedGear.  # noqa: E501

        The distance logged with this gear.  # noqa: E501

        :return: The distance of this DetailedGear.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this DetailedGear.

        The distance logged with this gear.  # noqa: E501

        :param distance: The distance of this DetailedGear.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def brand_name(self):
        """Gets the brand_name of this DetailedGear.  # noqa: E501

        The gear's brand name.  # noqa: E501

        :return: The brand_name of this DetailedGear.  # noqa: E501
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this DetailedGear.

        The gear's brand name.  # noqa: E501

        :param brand_name: The brand_name of this DetailedGear.  # noqa: E501
        :type: str
        """

        self._brand_name = brand_name

    @property
    def model_name(self):
        """Gets the model_name of this DetailedGear.  # noqa: E501

        The gear's model name.  # noqa: E501

        :return: The model_name of this DetailedGear.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DetailedGear.

        The gear's model name.  # noqa: E501

        :param model_name: The model_name of this DetailedGear.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def frame_type(self):
        """Gets the frame_type of this DetailedGear.  # noqa: E501

        The gear's frame type (bike only).  # noqa: E501

        :return: The frame_type of this DetailedGear.  # noqa: E501
        :rtype: int
        """
        return self._frame_type

    @frame_type.setter
    def frame_type(self, frame_type):
        """Sets the frame_type of this DetailedGear.

        The gear's frame type (bike only).  # noqa: E501

        :param frame_type: The frame_type of this DetailedGear.  # noqa: E501
        :type: int
        """

        self._frame_type = frame_type

    @property
    def description(self):
        """Gets the description of this DetailedGear.  # noqa: E501

        The gear's description.  # noqa: E501

        :return: The description of this DetailedGear.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DetailedGear.

        The gear's description.  # noqa: E501

        :param description: The description of this DetailedGear.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailedGear, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedGear):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
