# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.summary_athlete import SummaryAthlete  # noqa: F401,E501
from swagger_client.models.summary_club import SummaryClub  # noqa: F401,E501
from swagger_client.models.summary_gear import SummaryGear  # noqa: F401,E501


class DetailedAthlete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'resource_state': 'int',
        'firstname': 'str',
        'lastname': 'str',
        'profile_medium': 'str',
        'profile': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'sex': 'str',
        'friend': 'str',
        'follower': 'str',
        'premium': 'bool',
        'summit': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'follower_count': 'int',
        'friend_count': 'int',
        'mutual_friend_count': 'int',
        'measurement_preference': 'str',
        'ftp': 'int',
        'weight': 'float',
        'clubs': 'list[SummaryClub]',
        'bikes': 'list[SummaryGear]',
        'shoes': 'list[SummaryGear]'
    }

    attribute_map = {
        'id': 'id',
        'resource_state': 'resource_state',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'profile_medium': 'profile_medium',
        'profile': 'profile',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'sex': 'sex',
        'friend': 'friend',
        'follower': 'follower',
        'premium': 'premium',
        'summit': 'summit',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'follower_count': 'follower_count',
        'friend_count': 'friend_count',
        'mutual_friend_count': 'mutual_friend_count',
        'measurement_preference': 'measurement_preference',
        'ftp': 'ftp',
        'weight': 'weight',
        'clubs': 'clubs',
        'bikes': 'bikes',
        'shoes': 'shoes'
    }

    def __init__(self, id=None, resource_state=None, firstname=None, lastname=None, profile_medium=None, profile=None, city=None, state=None, country=None, sex=None, friend=None, follower=None, premium=None, summit=None, created_at=None, updated_at=None, follower_count=None, friend_count=None, mutual_friend_count=None, measurement_preference=None, ftp=None, weight=None, clubs=None, bikes=None, shoes=None):  # noqa: E501
        """DetailedAthlete - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._resource_state = None
        self._firstname = None
        self._lastname = None
        self._profile_medium = None
        self._profile = None
        self._city = None
        self._state = None
        self._country = None
        self._sex = None
        self._friend = None
        self._follower = None
        self._premium = None
        self._summit = None
        self._created_at = None
        self._updated_at = None
        self._follower_count = None
        self._friend_count = None
        self._mutual_friend_count = None
        self._measurement_preference = None
        self._ftp = None
        self._weight = None
        self._clubs = None
        self._bikes = None
        self._shoes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if resource_state is not None:
            self.resource_state = resource_state
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if profile_medium is not None:
            self.profile_medium = profile_medium
        if profile is not None:
            self.profile = profile
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if sex is not None:
            self.sex = sex
        if friend is not None:
            self.friend = friend
        if follower is not None:
            self.follower = follower
        if premium is not None:
            self.premium = premium
        if summit is not None:
            self.summit = summit
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if follower_count is not None:
            self.follower_count = follower_count
        if friend_count is not None:
            self.friend_count = friend_count
        if mutual_friend_count is not None:
            self.mutual_friend_count = mutual_friend_count
        if measurement_preference is not None:
            self.measurement_preference = measurement_preference
        if ftp is not None:
            self.ftp = ftp
        if weight is not None:
            self.weight = weight
        if clubs is not None:
            self.clubs = clubs
        if bikes is not None:
            self.bikes = bikes
        if shoes is not None:
            self.shoes = shoes

    @property
    def id(self):
        """Gets the id of this DetailedAthlete.  # noqa: E501

        The unique identifier of the athlete  # noqa: E501

        :return: The id of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DetailedAthlete.

        The unique identifier of the athlete  # noqa: E501

        :param id: The id of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def resource_state(self):
        """Gets the resource_state of this DetailedAthlete.  # noqa: E501

        Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"  # noqa: E501

        :return: The resource_state of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this DetailedAthlete.

        Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"  # noqa: E501

        :param resource_state: The resource_state of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._resource_state = resource_state

    @property
    def firstname(self):
        """Gets the firstname of this DetailedAthlete.  # noqa: E501

        The athlete's first name.  # noqa: E501

        :return: The firstname of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this DetailedAthlete.

        The athlete's first name.  # noqa: E501

        :param firstname: The firstname of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this DetailedAthlete.  # noqa: E501

        The athlete's last name.  # noqa: E501

        :return: The lastname of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this DetailedAthlete.

        The athlete's last name.  # noqa: E501

        :param lastname: The lastname of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def profile_medium(self):
        """Gets the profile_medium of this DetailedAthlete.  # noqa: E501

        URL to a 62x62 pixel profile picture.  # noqa: E501

        :return: The profile_medium of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._profile_medium

    @profile_medium.setter
    def profile_medium(self, profile_medium):
        """Sets the profile_medium of this DetailedAthlete.

        URL to a 62x62 pixel profile picture.  # noqa: E501

        :param profile_medium: The profile_medium of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._profile_medium = profile_medium

    @property
    def profile(self):
        """Gets the profile of this DetailedAthlete.  # noqa: E501

        URL to a 124x124 pixel profile picture.  # noqa: E501

        :return: The profile of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this DetailedAthlete.

        URL to a 124x124 pixel profile picture.  # noqa: E501

        :param profile: The profile of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def city(self):
        """Gets the city of this DetailedAthlete.  # noqa: E501

        The athlete's city.  # noqa: E501

        :return: The city of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this DetailedAthlete.

        The athlete's city.  # noqa: E501

        :param city: The city of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this DetailedAthlete.  # noqa: E501

        The athlete's state or geographical region.  # noqa: E501

        :return: The state of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DetailedAthlete.

        The athlete's state or geographical region.  # noqa: E501

        :param state: The state of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this DetailedAthlete.  # noqa: E501

        The athlete's country.  # noqa: E501

        :return: The country of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DetailedAthlete.

        The athlete's country.  # noqa: E501

        :param country: The country of this DetailedAthlete.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def sex(self):
        """Gets the sex of this DetailedAthlete.  # noqa: E501

        The athlete's sex.  # noqa: E501

        :return: The sex of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this DetailedAthlete.

        The athlete's sex.  # noqa: E501

        :param sex: The sex of this DetailedAthlete.  # noqa: E501
        :type: str
        """
        allowed_values = ["M", "F"]  # noqa: E501
        if sex not in allowed_values:
            raise ValueError(
                "Invalid value for `sex` ({0}), must be one of {1}"  # noqa: E501
                .format(sex, allowed_values)
            )

        self._sex = sex

    @property
    def friend(self):
        """Gets the friend of this DetailedAthlete.  # noqa: E501

        Whether the currently logged-in athlete follows this athlete.  # noqa: E501

        :return: The friend of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._friend

    @friend.setter
    def friend(self, friend):
        """Sets the friend of this DetailedAthlete.

        Whether the currently logged-in athlete follows this athlete.  # noqa: E501

        :param friend: The friend of this DetailedAthlete.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "accepted", "blocked"]  # noqa: E501
        if friend not in allowed_values:
            raise ValueError(
                "Invalid value for `friend` ({0}), must be one of {1}"  # noqa: E501
                .format(friend, allowed_values)
            )

        self._friend = friend

    @property
    def follower(self):
        """Gets the follower of this DetailedAthlete.  # noqa: E501

        Whether this athlete follows the currently logged-in athlete.  # noqa: E501

        :return: The follower of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._follower

    @follower.setter
    def follower(self, follower):
        """Sets the follower of this DetailedAthlete.

        Whether this athlete follows the currently logged-in athlete.  # noqa: E501

        :param follower: The follower of this DetailedAthlete.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "accepted", "blocked"]  # noqa: E501
        if follower not in allowed_values:
            raise ValueError(
                "Invalid value for `follower` ({0}), must be one of {1}"  # noqa: E501
                .format(follower, allowed_values)
            )

        self._follower = follower

    @property
    def premium(self):
        """Gets the premium of this DetailedAthlete.  # noqa: E501

        Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.  # noqa: E501

        :return: The premium of this DetailedAthlete.  # noqa: E501
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this DetailedAthlete.

        Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.  # noqa: E501

        :param premium: The premium of this DetailedAthlete.  # noqa: E501
        :type: bool
        """

        self._premium = premium

    @property
    def summit(self):
        """Gets the summit of this DetailedAthlete.  # noqa: E501

        Whether the athlete has any Summit subscription.  # noqa: E501

        :return: The summit of this DetailedAthlete.  # noqa: E501
        :rtype: bool
        """
        return self._summit

    @summit.setter
    def summit(self, summit):
        """Sets the summit of this DetailedAthlete.

        Whether the athlete has any Summit subscription.  # noqa: E501

        :param summit: The summit of this DetailedAthlete.  # noqa: E501
        :type: bool
        """

        self._summit = summit

    @property
    def created_at(self):
        """Gets the created_at of this DetailedAthlete.  # noqa: E501

        The time at which the athlete was created.  # noqa: E501

        :return: The created_at of this DetailedAthlete.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DetailedAthlete.

        The time at which the athlete was created.  # noqa: E501

        :param created_at: The created_at of this DetailedAthlete.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DetailedAthlete.  # noqa: E501

        The time at which the athlete was last updated.  # noqa: E501

        :return: The updated_at of this DetailedAthlete.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DetailedAthlete.

        The time at which the athlete was last updated.  # noqa: E501

        :param updated_at: The updated_at of this DetailedAthlete.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def follower_count(self):
        """Gets the follower_count of this DetailedAthlete.  # noqa: E501

        The athlete's follower count.  # noqa: E501

        :return: The follower_count of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._follower_count

    @follower_count.setter
    def follower_count(self, follower_count):
        """Sets the follower_count of this DetailedAthlete.

        The athlete's follower count.  # noqa: E501

        :param follower_count: The follower_count of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._follower_count = follower_count

    @property
    def friend_count(self):
        """Gets the friend_count of this DetailedAthlete.  # noqa: E501

        The athlete's friend count.  # noqa: E501

        :return: The friend_count of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._friend_count

    @friend_count.setter
    def friend_count(self, friend_count):
        """Sets the friend_count of this DetailedAthlete.

        The athlete's friend count.  # noqa: E501

        :param friend_count: The friend_count of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._friend_count = friend_count

    @property
    def mutual_friend_count(self):
        """Gets the mutual_friend_count of this DetailedAthlete.  # noqa: E501

        The number or athletes mutually followed by this athlete and the currently logged-in athlete.  # noqa: E501

        :return: The mutual_friend_count of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._mutual_friend_count

    @mutual_friend_count.setter
    def mutual_friend_count(self, mutual_friend_count):
        """Sets the mutual_friend_count of this DetailedAthlete.

        The number or athletes mutually followed by this athlete and the currently logged-in athlete.  # noqa: E501

        :param mutual_friend_count: The mutual_friend_count of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._mutual_friend_count = mutual_friend_count

    @property
    def measurement_preference(self):
        """Gets the measurement_preference of this DetailedAthlete.  # noqa: E501

        The athlete's preferred unit system.  # noqa: E501

        :return: The measurement_preference of this DetailedAthlete.  # noqa: E501
        :rtype: str
        """
        return self._measurement_preference

    @measurement_preference.setter
    def measurement_preference(self, measurement_preference):
        """Sets the measurement_preference of this DetailedAthlete.

        The athlete's preferred unit system.  # noqa: E501

        :param measurement_preference: The measurement_preference of this DetailedAthlete.  # noqa: E501
        :type: str
        """
        allowed_values = ["feet", "meters"]  # noqa: E501
        if measurement_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `measurement_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(measurement_preference, allowed_values)
            )

        self._measurement_preference = measurement_preference

    @property
    def ftp(self):
        """Gets the ftp of this DetailedAthlete.  # noqa: E501

        The athlete's FTP (Functional Threshold Power).  # noqa: E501

        :return: The ftp of this DetailedAthlete.  # noqa: E501
        :rtype: int
        """
        return self._ftp

    @ftp.setter
    def ftp(self, ftp):
        """Sets the ftp of this DetailedAthlete.

        The athlete's FTP (Functional Threshold Power).  # noqa: E501

        :param ftp: The ftp of this DetailedAthlete.  # noqa: E501
        :type: int
        """

        self._ftp = ftp

    @property
    def weight(self):
        """Gets the weight of this DetailedAthlete.  # noqa: E501

        The athlete's weight.  # noqa: E501

        :return: The weight of this DetailedAthlete.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DetailedAthlete.

        The athlete's weight.  # noqa: E501

        :param weight: The weight of this DetailedAthlete.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def clubs(self):
        """Gets the clubs of this DetailedAthlete.  # noqa: E501

        The athlete's clubs.  # noqa: E501

        :return: The clubs of this DetailedAthlete.  # noqa: E501
        :rtype: list[SummaryClub]
        """
        return self._clubs

    @clubs.setter
    def clubs(self, clubs):
        """Sets the clubs of this DetailedAthlete.

        The athlete's clubs.  # noqa: E501

        :param clubs: The clubs of this DetailedAthlete.  # noqa: E501
        :type: list[SummaryClub]
        """

        self._clubs = clubs

    @property
    def bikes(self):
        """Gets the bikes of this DetailedAthlete.  # noqa: E501

        The athlete's bikes.  # noqa: E501

        :return: The bikes of this DetailedAthlete.  # noqa: E501
        :rtype: list[SummaryGear]
        """
        return self._bikes

    @bikes.setter
    def bikes(self, bikes):
        """Sets the bikes of this DetailedAthlete.

        The athlete's bikes.  # noqa: E501

        :param bikes: The bikes of this DetailedAthlete.  # noqa: E501
        :type: list[SummaryGear]
        """

        self._bikes = bikes

    @property
    def shoes(self):
        """Gets the shoes of this DetailedAthlete.  # noqa: E501

        The athlete's shoes.  # noqa: E501

        :return: The shoes of this DetailedAthlete.  # noqa: E501
        :rtype: list[SummaryGear]
        """
        return self._shoes

    @shoes.setter
    def shoes(self, shoes):
        """Sets the shoes of this DetailedAthlete.

        The athlete's shoes.  # noqa: E501

        :param shoes: The shoes of this DetailedAthlete.  # noqa: E501
        :type: list[SummaryGear]
        """

        self._shoes = shoes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailedAthlete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedAthlete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
