# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.activity_total import ActivityTotal  # noqa: F401,E501


class ActivityStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'biggest_ride_distance': 'float',
        'biggest_climb_elevation_gain': 'float',
        'recent_ride_totals': 'ActivityTotal',
        'recent_run_totals': 'ActivityTotal',
        'recent_swim_totals': 'ActivityTotal',
        'ytd_ride_totals': 'ActivityTotal',
        'ytd_run_totals': 'ActivityTotal',
        'ytd_swim_totals': 'ActivityTotal',
        'all_ride_totals': 'ActivityTotal',
        'all_run_totals': 'ActivityTotal',
        'all_swim_totals': 'ActivityTotal'
    }

    attribute_map = {
        'biggest_ride_distance': 'biggest_ride_distance',
        'biggest_climb_elevation_gain': 'biggest_climb_elevation_gain',
        'recent_ride_totals': 'recent_ride_totals',
        'recent_run_totals': 'recent_run_totals',
        'recent_swim_totals': 'recent_swim_totals',
        'ytd_ride_totals': 'ytd_ride_totals',
        'ytd_run_totals': 'ytd_run_totals',
        'ytd_swim_totals': 'ytd_swim_totals',
        'all_ride_totals': 'all_ride_totals',
        'all_run_totals': 'all_run_totals',
        'all_swim_totals': 'all_swim_totals'
    }

    def __init__(self, biggest_ride_distance=None, biggest_climb_elevation_gain=None, recent_ride_totals=None, recent_run_totals=None, recent_swim_totals=None, ytd_ride_totals=None, ytd_run_totals=None, ytd_swim_totals=None, all_ride_totals=None, all_run_totals=None, all_swim_totals=None):  # noqa: E501
        """ActivityStats - a model defined in Swagger"""  # noqa: E501

        self._biggest_ride_distance = None
        self._biggest_climb_elevation_gain = None
        self._recent_ride_totals = None
        self._recent_run_totals = None
        self._recent_swim_totals = None
        self._ytd_ride_totals = None
        self._ytd_run_totals = None
        self._ytd_swim_totals = None
        self._all_ride_totals = None
        self._all_run_totals = None
        self._all_swim_totals = None
        self.discriminator = None

        if biggest_ride_distance is not None:
            self.biggest_ride_distance = biggest_ride_distance
        if biggest_climb_elevation_gain is not None:
            self.biggest_climb_elevation_gain = biggest_climb_elevation_gain
        if recent_ride_totals is not None:
            self.recent_ride_totals = recent_ride_totals
        if recent_run_totals is not None:
            self.recent_run_totals = recent_run_totals
        if recent_swim_totals is not None:
            self.recent_swim_totals = recent_swim_totals
        if ytd_ride_totals is not None:
            self.ytd_ride_totals = ytd_ride_totals
        if ytd_run_totals is not None:
            self.ytd_run_totals = ytd_run_totals
        if ytd_swim_totals is not None:
            self.ytd_swim_totals = ytd_swim_totals
        if all_ride_totals is not None:
            self.all_ride_totals = all_ride_totals
        if all_run_totals is not None:
            self.all_run_totals = all_run_totals
        if all_swim_totals is not None:
            self.all_swim_totals = all_swim_totals

    @property
    def biggest_ride_distance(self):
        """Gets the biggest_ride_distance of this ActivityStats.  # noqa: E501

        The longest distance ridden by the athlete.  # noqa: E501

        :return: The biggest_ride_distance of this ActivityStats.  # noqa: E501
        :rtype: float
        """
        return self._biggest_ride_distance

    @biggest_ride_distance.setter
    def biggest_ride_distance(self, biggest_ride_distance):
        """Sets the biggest_ride_distance of this ActivityStats.

        The longest distance ridden by the athlete.  # noqa: E501

        :param biggest_ride_distance: The biggest_ride_distance of this ActivityStats.  # noqa: E501
        :type: float
        """

        self._biggest_ride_distance = biggest_ride_distance

    @property
    def biggest_climb_elevation_gain(self):
        """Gets the biggest_climb_elevation_gain of this ActivityStats.  # noqa: E501

        The highest climb ridden by the athlete.  # noqa: E501

        :return: The biggest_climb_elevation_gain of this ActivityStats.  # noqa: E501
        :rtype: float
        """
        return self._biggest_climb_elevation_gain

    @biggest_climb_elevation_gain.setter
    def biggest_climb_elevation_gain(self, biggest_climb_elevation_gain):
        """Sets the biggest_climb_elevation_gain of this ActivityStats.

        The highest climb ridden by the athlete.  # noqa: E501

        :param biggest_climb_elevation_gain: The biggest_climb_elevation_gain of this ActivityStats.  # noqa: E501
        :type: float
        """

        self._biggest_climb_elevation_gain = biggest_climb_elevation_gain

    @property
    def recent_ride_totals(self):
        """Gets the recent_ride_totals of this ActivityStats.  # noqa: E501

        The recent (last 4 weeks) ride stats for the athlete.  # noqa: E501

        :return: The recent_ride_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._recent_ride_totals

    @recent_ride_totals.setter
    def recent_ride_totals(self, recent_ride_totals):
        """Sets the recent_ride_totals of this ActivityStats.

        The recent (last 4 weeks) ride stats for the athlete.  # noqa: E501

        :param recent_ride_totals: The recent_ride_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._recent_ride_totals = recent_ride_totals

    @property
    def recent_run_totals(self):
        """Gets the recent_run_totals of this ActivityStats.  # noqa: E501

        The recent (last 4 weeks) run stats for the athlete.  # noqa: E501

        :return: The recent_run_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._recent_run_totals

    @recent_run_totals.setter
    def recent_run_totals(self, recent_run_totals):
        """Sets the recent_run_totals of this ActivityStats.

        The recent (last 4 weeks) run stats for the athlete.  # noqa: E501

        :param recent_run_totals: The recent_run_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._recent_run_totals = recent_run_totals

    @property
    def recent_swim_totals(self):
        """Gets the recent_swim_totals of this ActivityStats.  # noqa: E501

        The recent (last 4 weeks) swim stats for the athlete.  # noqa: E501

        :return: The recent_swim_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._recent_swim_totals

    @recent_swim_totals.setter
    def recent_swim_totals(self, recent_swim_totals):
        """Sets the recent_swim_totals of this ActivityStats.

        The recent (last 4 weeks) swim stats for the athlete.  # noqa: E501

        :param recent_swim_totals: The recent_swim_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._recent_swim_totals = recent_swim_totals

    @property
    def ytd_ride_totals(self):
        """Gets the ytd_ride_totals of this ActivityStats.  # noqa: E501

        The year to date ride stats for the athlete.  # noqa: E501

        :return: The ytd_ride_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._ytd_ride_totals

    @ytd_ride_totals.setter
    def ytd_ride_totals(self, ytd_ride_totals):
        """Sets the ytd_ride_totals of this ActivityStats.

        The year to date ride stats for the athlete.  # noqa: E501

        :param ytd_ride_totals: The ytd_ride_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._ytd_ride_totals = ytd_ride_totals

    @property
    def ytd_run_totals(self):
        """Gets the ytd_run_totals of this ActivityStats.  # noqa: E501

        The year to date run stats for the athlete.  # noqa: E501

        :return: The ytd_run_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._ytd_run_totals

    @ytd_run_totals.setter
    def ytd_run_totals(self, ytd_run_totals):
        """Sets the ytd_run_totals of this ActivityStats.

        The year to date run stats for the athlete.  # noqa: E501

        :param ytd_run_totals: The ytd_run_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._ytd_run_totals = ytd_run_totals

    @property
    def ytd_swim_totals(self):
        """Gets the ytd_swim_totals of this ActivityStats.  # noqa: E501

        The year to date swim stats for the athlete.  # noqa: E501

        :return: The ytd_swim_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._ytd_swim_totals

    @ytd_swim_totals.setter
    def ytd_swim_totals(self, ytd_swim_totals):
        """Sets the ytd_swim_totals of this ActivityStats.

        The year to date swim stats for the athlete.  # noqa: E501

        :param ytd_swim_totals: The ytd_swim_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._ytd_swim_totals = ytd_swim_totals

    @property
    def all_ride_totals(self):
        """Gets the all_ride_totals of this ActivityStats.  # noqa: E501

        The all time ride stats for the athlete.  # noqa: E501

        :return: The all_ride_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._all_ride_totals

    @all_ride_totals.setter
    def all_ride_totals(self, all_ride_totals):
        """Sets the all_ride_totals of this ActivityStats.

        The all time ride stats for the athlete.  # noqa: E501

        :param all_ride_totals: The all_ride_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._all_ride_totals = all_ride_totals

    @property
    def all_run_totals(self):
        """Gets the all_run_totals of this ActivityStats.  # noqa: E501

        The all time run stats for the athlete.  # noqa: E501

        :return: The all_run_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._all_run_totals

    @all_run_totals.setter
    def all_run_totals(self, all_run_totals):
        """Sets the all_run_totals of this ActivityStats.

        The all time run stats for the athlete.  # noqa: E501

        :param all_run_totals: The all_run_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._all_run_totals = all_run_totals

    @property
    def all_swim_totals(self):
        """Gets the all_swim_totals of this ActivityStats.  # noqa: E501

        The all time swim stats for the athlete.  # noqa: E501

        :return: The all_swim_totals of this ActivityStats.  # noqa: E501
        :rtype: ActivityTotal
        """
        return self._all_swim_totals

    @all_swim_totals.setter
    def all_swim_totals(self, all_swim_totals):
        """Sets the all_swim_totals of this ActivityStats.

        The all time swim stats for the athlete.  # noqa: E501

        :param all_swim_totals: The all_swim_totals of this ActivityStats.  # noqa: E501
        :type: ActivityTotal
        """

        self._all_swim_totals = all_swim_totals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
