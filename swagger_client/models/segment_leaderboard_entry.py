# coding: utf-8

"""
    Strava API v3

    Strava API  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SegmentLeaderboardEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'athlete_name': 'str',
        'elapsed_time': 'int',
        'moving_time': 'int',
        'start_date': 'datetime',
        'start_date_local': 'datetime',
        'rank': 'int'
    }

    attribute_map = {
        'athlete_name': 'athlete_name',
        'elapsed_time': 'elapsed_time',
        'moving_time': 'moving_time',
        'start_date': 'start_date',
        'start_date_local': 'start_date_local',
        'rank': 'rank'
    }

    def __init__(self, athlete_name=None, elapsed_time=None, moving_time=None, start_date=None, start_date_local=None, rank=None):  # noqa: E501
        """SegmentLeaderboardEntry - a model defined in Swagger"""  # noqa: E501

        self._athlete_name = None
        self._elapsed_time = None
        self._moving_time = None
        self._start_date = None
        self._start_date_local = None
        self._rank = None
        self.discriminator = None

        if athlete_name is not None:
            self.athlete_name = athlete_name
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if moving_time is not None:
            self.moving_time = moving_time
        if start_date is not None:
            self.start_date = start_date
        if start_date_local is not None:
            self.start_date_local = start_date_local
        if rank is not None:
            self.rank = rank

    @property
    def athlete_name(self):
        """Gets the athlete_name of this SegmentLeaderboardEntry.  # noqa: E501

        The public name of the athlete  # noqa: E501

        :return: The athlete_name of this SegmentLeaderboardEntry.  # noqa: E501
        :rtype: str
        """
        return self._athlete_name

    @athlete_name.setter
    def athlete_name(self, athlete_name):
        """Sets the athlete_name of this SegmentLeaderboardEntry.

        The public name of the athlete  # noqa: E501

        :param athlete_name: The athlete_name of this SegmentLeaderboardEntry.  # noqa: E501
        :type: str
        """

        self._athlete_name = athlete_name

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this SegmentLeaderboardEntry.  # noqa: E501

        The elapsed of the segment effort associated with this entry  # noqa: E501

        :return: The elapsed_time of this SegmentLeaderboardEntry.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this SegmentLeaderboardEntry.

        The elapsed of the segment effort associated with this entry  # noqa: E501

        :param elapsed_time: The elapsed_time of this SegmentLeaderboardEntry.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def moving_time(self):
        """Gets the moving_time of this SegmentLeaderboardEntry.  # noqa: E501

        The moving of the segment effort associated with this entry  # noqa: E501

        :return: The moving_time of this SegmentLeaderboardEntry.  # noqa: E501
        :rtype: int
        """
        return self._moving_time

    @moving_time.setter
    def moving_time(self, moving_time):
        """Sets the moving_time of this SegmentLeaderboardEntry.

        The moving of the segment effort associated with this entry  # noqa: E501

        :param moving_time: The moving_time of this SegmentLeaderboardEntry.  # noqa: E501
        :type: int
        """

        self._moving_time = moving_time

    @property
    def start_date(self):
        """Gets the start_date of this SegmentLeaderboardEntry.  # noqa: E501

        The time at which the effort was started.  # noqa: E501

        :return: The start_date of this SegmentLeaderboardEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SegmentLeaderboardEntry.

        The time at which the effort was started.  # noqa: E501

        :param start_date: The start_date of this SegmentLeaderboardEntry.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def start_date_local(self):
        """Gets the start_date_local of this SegmentLeaderboardEntry.  # noqa: E501

        The time at which the effort was started in the local timezone.  # noqa: E501

        :return: The start_date_local of this SegmentLeaderboardEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_local

    @start_date_local.setter
    def start_date_local(self, start_date_local):
        """Sets the start_date_local of this SegmentLeaderboardEntry.

        The time at which the effort was started in the local timezone.  # noqa: E501

        :param start_date_local: The start_date_local of this SegmentLeaderboardEntry.  # noqa: E501
        :type: datetime
        """

        self._start_date_local = start_date_local

    @property
    def rank(self):
        """Gets the rank of this SegmentLeaderboardEntry.  # noqa: E501

        The rank of this entry in the leaderboard  # noqa: E501

        :return: The rank of this SegmentLeaderboardEntry.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this SegmentLeaderboardEntry.

        The rank of this entry in the leaderboard  # noqa: E501

        :param rank: The rank of this SegmentLeaderboardEntry.  # noqa: E501
        :type: int
        """

        self._rank = rank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentLeaderboardEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentLeaderboardEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
